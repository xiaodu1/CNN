import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

import mnist as mnist

mnist = input_data.read_data_sets('MNIST_data',one_hot=True)


def compute_accuracy(v_xs,v_ys):
    global prediction
    y_pre = sess.run(prediction,feed_dict={xs:v_xs,keep_prob:1})
    correct_prediction = tf.equal(tf.argmax(y_pre,1),tf.argmax(v_ys,1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
    result = sess.run(accuracy,feed_dict={xs:v_xs,ys:v_ys,keep_prob:1.0})
    return result

def weight_variable(shape):
    initial = tf.truncated_normal(shape,stddev=0.1) #stddev:样本标准差:样本方差的算术平方根叫做样本标准差
                                                    #样本方差 ：样本中各数据与样本平均数的差的平方和的平均数叫样本方差。
                                                    #样本方差和样本标准差都是衡量一个样本波动大小的量，
                                                    # 样本方差或样本标准差越大，样本数据的波动就越大。
    return tf.Variable(initial)
def bias_variable(shape):
    initial = tf.constant(0.1,shape=shape)
    return tf.Variable(initial)

def conv2d(x,W):
    #stride[1,x_movement,y_movement,1]
    #Must have strides[0] = strides[3]
    return tf.nn.conv2d(x,W,strides=[1,1,1,1],padding='SAME')

def max_pool_2x2(x):
    return tf.nn.max_pool(x,ksize=[1,2,2,1],strides=[1,2,2,1],padding='SAME')

#define placeholder for inputs to network
xs = tf.placeholder(tf.float32,[None,784])#28*28
ys = tf.placeholder(tf.float32,[None,10])
keep_prob = tf.placeholder(tf.float32)
x_image =tf.reshape(xs,[-1,28,28,1])
#print(x_image.shape) #[n_sample,28,28,1]
#-1表示不知道填什么数据，但是可以通过后面的数据计算得出
#右边的形状确定后，系统会自动进行一个除法运算，得出图片数
#1为图片的channal数

##conv1 layer##
W_conv1 = weight_variable([5,5,1,32]) #卷积核或过滤器的长宽5*5，
                                      #in size:1 输入的图片的channal数
                                      #这里图片为灰度图像只有一个通道数
                                      #32为卷积核或过滤器的个数
b_conv1 = bias_variable([32])
h_conv1 = tf.nn.relu(conv2d(x_image,W_conv1) + b_conv1) #output size 28*28*32
h_pool1 = max_pool_2x2(h_conv1)                         #output size  14*14*32
                                                        #长宽缩小一半是因为步长stride为2

##conv2 layer##
W_conv2 = weight_variable([5,5,32,64])                      #定义卷积核
b_conv2 = bias_variable([64])                               #定义偏差
h_conv2 = tf.nn.relu(conv2d(h_pool1,W_conv2) + b_conv2)     #进行卷积后加上偏差，最后激励函数激励一下
                                                            #output size 14*14*64
h_pool2 = max_pool_2x2(h_conv2)                             #进行池化
                                                            #output size 7*7*64

##func1 layer##
W_fc1 = weight_variable([7*7*64,1024])                      #输入为7*7*64，输出为1024
b_fc1 = bias_variable([1024])
#将h_pool2展平 [n_samples,7,7,64] ->>[n_samples,7*7*64]
h_pool2_flat = tf.reshape(h_pool2,[-1,7*7*64])
h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat,W_fc1) + b_fc1)
h_fc1_drop = tf.nn.dropout(h_fc1,keep_prob)

##func2 layer##
W_fc2 = weight_variable([1024,10])
b_fc2 = bias_variable([10])
prediction = tf.nn.softmax(tf.matmul(h_fc1_drop,W_fc2) + b_fc2)

#the loss between prediction and data
cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys*tf.log(prediction),reduction_indices=[1]))
train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)


with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for i in range(1000):
        batch_xs,batch_ys = mnist.train.next_batch(100)
        sess.run(train_step,feed_dict={xs:batch_xs,ys:batch_ys,keep_prob:1.0})
        if i % 50 == 0:
            print(compute_accuracy(mnist.test.images,mnist.test.labels))
